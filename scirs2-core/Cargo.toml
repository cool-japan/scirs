[package]
name = "scirs2-core"
version = "0.1.0-alpha.4"
edition = "2021"
authors = ["SciRS2 Team"]
description = "Core utilities and common functionality for SciRS2"
license = "MIT OR Apache-2.0"
repository = "https://github.com/cool-japan/scirs"
keywords = ["scientific", "mathematics", "science", "scipy", "numerical"]
categories = ["science", "mathematics", "algorithms"]

[dependencies]
# Core dependencies
ndarray = { workspace = true }
num-traits = { workspace = true }
num-complex = { workspace = true }
thiserror = { workspace = true }
once_cell.workspace = true
cached = { workspace = true, optional = true }  # Memoization and caching
chrono = { workspace = true, features = ["serde"] }
rand = { workspace = true }
rand_distr = { workspace = true }
serde = { workspace = true, optional = true }  # Serialization
serde_json = { workspace = true, optional = true }  # JSON serialization
uuid = { workspace = true }  # Used for unique identifiers
tempfile = { workspace = true, optional = true }  # For temporary files in memory_efficient
bincode = { workspace = true, optional = true }  # For serialization in memory_efficient
memmap2 = { workspace = true, optional = true }  # For memory-mapped arrays

# Feature-gated dependencies
wide = { workspace = true, optional = true }  # SIMD acceleration
rayon = { workspace = true, optional = true }  # Parallel processing
crossbeam-utils = { workspace = true, optional = true }  # Used in parallel scheduler
crossbeam-deque = { workspace = true, optional = true }  # Used in parallel scheduler
num_cpus = { workspace = true, optional = true }  # CPU count detection

# Compression libraries
lz4 = { workspace = true, optional = true }   # LZ4 compression
zstd = { workspace = true, optional = true }  # Zstandard compression
snap = { workspace = true, optional = true }   # Snappy compression

# System monitoring for resource-aware prefetching
libc = { workspace = true, optional = true }  # System calls for resource monitoring

# BLAS/LAPACK dependencies for linear algebra operations
ndarray-linalg = { workspace = true, optional = true }  # LAPACK bindings for ndarray

# JIT compilation for Array Protocol
cranelift-module = { workspace = true, optional = true }  # JIT compilation module
cranelift-jit = { workspace = true, optional = true }  # JIT compiler (previously simplejit)
cranelift-frontend = { workspace = true, optional = true }  # JIT compiler frontend

[dev-dependencies]
approx = { workspace = true }
criterion = { workspace = true }
tempfile = { workspace = true }

[features]
default = ["array", "serialization"]  # Enable array module by default
simd = ["wide"]  # SIMD operations
parallel = ["rayon", "ndarray/rayon", "crossbeam-utils", "crossbeam-deque", "num_cpus"]  # Parallel processing with rayon
cache = ["cached"]  # Caching and memoization functionality
validation = []  # Validation utilities
logging = []  # Structured logging and diagnostics
gpu = []  # GPU acceleration abstractions
cuda = ["gpu"]  # CUDA-specific GPU acceleration
opencl = ["gpu"]  # OpenCL-specific GPU acceleration
metal = ["gpu"]  # Metal-specific GPU acceleration (Apple)
wgpu = ["gpu"]  # WebGPU-specific GPU acceleration
memory_management = []  # Advanced memory management
memory_efficient = ["tempfile", "bincode", "memmap2", "rayon"]  # Memory-efficient operations
memory_efficient_all_types = ["memory_efficient", "float32", "float64", "all_ints"]  # Full type support for memory-efficient operations
float32 = []  # Support for f32 in zero-copy operations
float64 = []  # Support for f64 in zero-copy operations
int32 = []    # Support for i32 in zero-copy operations
int64 = []    # Support for i64 in zero-copy operations
uint32 = []   # Support for u32 in zero-copy operations
uint64 = []   # Support for u64 in zero-copy operations
all_ints = [] # Support for all integer types in zero-copy operations
memory_compression = ["memory_efficient", "lz4", "zstd", "snap", "serde", "serde_json", "libc", "num_cpus"]  # Compressed memory-mapped arrays
memory_metrics = ["memory_management", "serde", "serde_json"]  # Enhanced memory metrics tracking
serialization = ["serde", "serde_json"]  # Serialization support
array = []  # Scientific array types (MaskedArray, RecordArray)
memory_visualization = ["memory_metrics"]  # Memory usage visualization
memory_call_stack = ["memory_metrics"]  # Capture call stacks for memory events
profiling = []  # Performance profiling tools
random = []  # Random number generation utilities
types = []  # Type conversion utilities
ufuncs = []  # Universal Functions (ufuncs) system
linalg = ["ndarray-linalg"]  # Linear algebra with BLAS/LAPACK bindings
openblas = ["ndarray-linalg/openblas-system"]  # Use OpenBLAS backend
intel-mkl = ["ndarray-linalg/intel-mkl"]  # Use Intel MKL backend
netlib = ["ndarray-linalg/netlib"]  # Use Netlib backend
array_protocol = []  # Array Protocol for third-party array implementations
array_protocol_jit = ["array_protocol", "cranelift-module", "cranelift-jit", "cranelift-frontend"]  # JIT compilation for Array Protocol
array_protocol_gpu = ["array_protocol", "gpu"]  # GPU support for Array Protocol
array_protocol_cuda = ["array_protocol_gpu", "cuda"]  # CUDA support for Array Protocol
array_protocol_opencl = ["array_protocol_gpu", "opencl"]  # OpenCL support for Array Protocol
array_protocol_metal = ["array_protocol_gpu", "metal"]  # Metal support for Array Protocol
array_protocol_wgpu = ["array_protocol_gpu", "wgpu"]  # WebGPU support for Array Protocol
array_protocol_distributed = ["array_protocol", "parallel"]  # Distributed computing for Array Protocol
array_protocol_all = ["array_protocol", "array_protocol_jit", "array_protocol_cuda", "array_protocol_distributed"]  # All Array Protocol features
all = [
    "simd", "parallel", "cache", "validation", "logging",
    "gpu", "cuda", "memory_management", "memory_efficient", "memory_compression",
    "array", "profiling", "random", "types", "linalg", "ufuncs",
    "array_protocol_all"
]  # Enable all features except backend-specific ones

[[example]]
name = "gpu_example"
path = "examples/gpu_example.rs"
required-features = ["gpu"]

[[example]]
name = "gpu_kernel_library"
path = "examples/gpu_kernel_library.rs"
required-features = ["gpu"]

[[example]]
name = "memory_management"
path = "examples/memory_management.rs"
required-features = ["memory_management"]

[[example]]
name = "logging_example"
path = "examples/logging_example.rs"
required-features = ["logging"]

[[example]]
name = "random_example"
path = "examples/random_example.rs"
required-features = ["random"]

[[example]]
name = "profiling_example"
path = "examples/profiling_example.rs"
required-features = ["profiling"]

[[example]]
name = "type_conversion_example"
path = "examples/type_conversion_example.rs"
required-features = ["types"]

[[example]]
name = "integrated_features"
path = "examples/integrated_features.rs"
required-features = ["logging", "profiling", "random", "memory_management", "types"]

[[example]]
name = "memory_metrics_example"
path = "examples/memory_metrics_example.rs"
required-features = ["memory_management"]

[[example]]
name = "memory_metrics_bufferpool"
path = "examples/memory_metrics_bufferpool.rs"
required-features = ["memory_management"]

[[example]]
name = "memory_metrics_chunking"
path = "examples/memory_metrics_chunking.rs"
required-features = ["memory_management"]

[[example]]
name = "memory_metrics_gpu"
path = "examples/memory_metrics_gpu.rs"
required-features = ["memory_management", "memory_metrics", "gpu"]

[[example]]
name = "memory_metrics_snapshots"
path = "examples/memory_metrics_snapshots.rs"
required-features = ["memory_management", "memory_metrics"]

[[example]]
name = "memory_efficient_example"
path = "examples/memory_efficient_example.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_array"
path = "examples/memory_mapped_array.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_adaptive"
path = "examples/memory_mapped_adaptive.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_chunks"
path = "examples/memory_mapped_chunks.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_compressed"
path = "examples/memory_mapped_compressed.rs"
required-features = ["memory_compression"]

[[example]]
name = "memory_mapped_mutation"
path = "examples/memory_mapped_mutation.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_parallel"
path = "examples/memory_mapped_parallel.rs"
required-features = ["memory_efficient", "parallel"]

[[example]]
name = "memory_mapped_running_stats"
path = "examples/memory_mapped_running_stats.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_simple"
path = "examples/memory_mapped_simple.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_slicing"
path = "examples/memory_mapped_slicing.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_zerocopy"
path = "examples/memory_mapped_zerocopy.rs"
required-features = ["memory_efficient"]

[[example]]
name = "memory_mapped_zerocopy_serialization"
path = "examples/memory_mapped_zerocopy_serialization.rs"
required-features = ["memory_efficient", "serialization"]

[[example]]
name = "scientific_arrays_example"
path = "examples/scientific_arrays_example.rs"
required-features = ["array"]

[[example]]
name = "large_dataset_processing"
path = "examples/large_dataset_processing.rs"
required-features = ["memory_efficient", "array", "random"]

[[example]]
name = "ndarray_ufuncs_example"
path = "examples/ndarray_ufuncs_example.rs"
required-features = ["ufuncs"]

[[example]]
name = "advanced_indexing_example"
path = "examples/advanced_indexing_example.rs"

[[example]]
name = "advanced_ndarray_example"
path = "examples/advanced_ndarray_example.rs"
required-features = ["ufuncs"]

[[example]]
name = "ndarray_advanced_operations"
path = "examples/ndarray_advanced_operations.rs"

[[example]]
name = "ndarray_statistical_operations"
path = "examples/ndarray_statistical_operations.rs"

[[example]]
name = "ndarray_correlation_binning"
path = "examples/ndarray_correlation_binning.rs"

[[example]]
name = "memory_mapped_prefetching"
path = "examples/memory_mapped_prefetching.rs"
required-features = ["memory_compression"]

[[example]]
name = "advanced_prefetching_example"
path = "examples/advanced_prefetching_example.rs"
required-features = ["memory_compression"]

[[example]]
name = "array_protocol_operations"
path = "examples/array_protocol_operations.rs"
required-features = ["array_protocol"]

[[example]]
name = "array_protocol_advanced"
path = "examples/array_protocol_advanced.rs"
required-features = ["array_protocol"]

[[example]]
name = "array_protocol_backpropagation"
path = "examples/array_protocol_backpropagation.rs"
required-features = ["array_protocol"]

[[example]]
name = "array_protocol_distributed_training"
path = "examples/array_protocol_distributed_training.rs"
required-features = ["array_protocol_distributed"]

[[example]]
name = "array_protocol_gpu"
path = "examples/array_protocol_gpu.rs"
required-features = ["array_protocol_cuda"]

[[example]]
name = "custom_array_protocol"
path = "examples/custom_array_protocol.rs"
required-features = ["array_protocol"]